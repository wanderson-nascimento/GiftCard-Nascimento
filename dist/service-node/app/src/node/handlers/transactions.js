"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionAuthorization = exports.getTransactionById = exports.createTransaction = exports.listTransactions = void 0;
const co_body_1 = require("co-body");
async function listTransactions(ctx) {
    const { clients: { giftCardProvider }, vtex: { route: { params: { giftCardId }, }, }, } = ctx;
    ctx.status = 200;
    ctx.body = giftCardProvider.listTransactions(giftCardId);
}
exports.listTransactions = listTransactions;
async function createTransaction(ctx) {
    const body = await co_body_1.json(ctx.req);
    const { clients: { giftCardProvider }, vtex: { route: { params: { giftCardId }, }, }, } = ctx;
    ctx.status = 200;
    ctx.body = giftCardProvider.createTransaction(giftCardId, body);
}
exports.createTransaction = createTransaction;
async function getTransactionById(ctx) {
    const { clients: { giftCardProvider }, vtex: { route: { params: { giftCardId, id }, }, }, } = ctx;
    ctx.status = 200;
    ctx.body = giftCardProvider.getTransactionById(id, giftCardId);
}
exports.getTransactionById = getTransactionById;
async function getTransactionAuthorization(ctx) {
    const { clients: { giftCardProvider }, vtex: { route: { params: { giftCardId, id }, }, }, } = ctx;
    ctx.status = 200;
    ctx.body = giftCardProvider.getTransactionAuthorization(id, giftCardId);
}
exports.getTransactionAuthorization = getTransactionAuthorization;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL25vZGUvaGFuZGxlcnMvdHJhbnNhY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUE4QjtBQUV2QixLQUFLLFVBQVUsZ0JBQWdCLENBQUMsR0FBWTtJQUNqRCxNQUFNLEVBQ0osT0FBTyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsRUFDN0IsSUFBSSxFQUFFLEVBQ0osS0FBSyxFQUFFLEVBQ0wsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQ3ZCLEdBQ0YsR0FDRixHQUFHLEdBQUcsQ0FBQTtJQUVQLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsVUFBb0IsQ0FBQyxDQUFBO0FBQ3BFLENBQUM7QUFaRCw0Q0FZQztBQUVNLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxHQUFZO0lBQ2xELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVoQyxNQUFNLEVBQ0osT0FBTyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsRUFDN0IsSUFBSSxFQUFFLEVBQ0osS0FBSyxFQUFFLEVBQ0wsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQ3ZCLEdBQ0YsR0FDRixHQUFHLEdBQUcsQ0FBQTtJQUVQLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsVUFBb0IsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUMzRSxDQUFDO0FBZEQsOENBY0M7QUFFTSxLQUFLLFVBQVUsa0JBQWtCLENBQUMsR0FBWTtJQUNuRCxNQUFNLEVBQ0osT0FBTyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsRUFDN0IsSUFBSSxFQUFFLEVBQ0osS0FBSyxFQUFFLEVBQ0wsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxHQUMzQixHQUNGLEdBQ0YsR0FBRyxHQUFHLENBQUE7SUFFUCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQTtJQUNoQixHQUFHLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLGtCQUFrQixDQUM1QyxFQUFZLEVBQ1osVUFBb0IsQ0FDckIsQ0FBQTtBQUNILENBQUM7QUFmRCxnREFlQztBQUVNLEtBQUssVUFBVSwyQkFBMkIsQ0FBQyxHQUFZO0lBQzVELE1BQU0sRUFDSixPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxFQUM3QixJQUFJLEVBQUUsRUFDSixLQUFLLEVBQUUsRUFDTCxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEdBQzNCLEdBQ0YsR0FDRixHQUFHLEdBQUcsQ0FBQTtJQUVQLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsMkJBQTJCLENBQ3JELEVBQVksRUFDWixVQUFvQixDQUNyQixDQUFBO0FBQ0gsQ0FBQztBQWZELGtFQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganNvbiB9IGZyb20gJ2NvLWJvZHknXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaXN0VHJhbnNhY3Rpb25zKGN0eDogQ29udGV4dCkge1xuICBjb25zdCB7XG4gICAgY2xpZW50czogeyBnaWZ0Q2FyZFByb3ZpZGVyIH0sXG4gICAgdnRleDoge1xuICAgICAgcm91dGU6IHtcbiAgICAgICAgcGFyYW1zOiB7IGdpZnRDYXJkSWQgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSA9IGN0eFxuXG4gIGN0eC5zdGF0dXMgPSAyMDBcbiAgY3R4LmJvZHkgPSBnaWZ0Q2FyZFByb3ZpZGVyLmxpc3RUcmFuc2FjdGlvbnMoZ2lmdENhcmRJZCBhcyBzdHJpbmcpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbihjdHg6IENvbnRleHQpIHtcbiAgY29uc3QgYm9keSA9IGF3YWl0IGpzb24oY3R4LnJlcSlcblxuICBjb25zdCB7XG4gICAgY2xpZW50czogeyBnaWZ0Q2FyZFByb3ZpZGVyIH0sXG4gICAgdnRleDoge1xuICAgICAgcm91dGU6IHtcbiAgICAgICAgcGFyYW1zOiB7IGdpZnRDYXJkSWQgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSA9IGN0eFxuXG4gIGN0eC5zdGF0dXMgPSAyMDBcbiAgY3R4LmJvZHkgPSBnaWZ0Q2FyZFByb3ZpZGVyLmNyZWF0ZVRyYW5zYWN0aW9uKGdpZnRDYXJkSWQgYXMgc3RyaW5nLCBib2R5KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25CeUlkKGN0eDogQ29udGV4dCkge1xuICBjb25zdCB7XG4gICAgY2xpZW50czogeyBnaWZ0Q2FyZFByb3ZpZGVyIH0sXG4gICAgdnRleDoge1xuICAgICAgcm91dGU6IHtcbiAgICAgICAgcGFyYW1zOiB7IGdpZnRDYXJkSWQsIGlkIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0gPSBjdHhcblxuICBjdHguc3RhdHVzID0gMjAwXG4gIGN0eC5ib2R5ID0gZ2lmdENhcmRQcm92aWRlci5nZXRUcmFuc2FjdGlvbkJ5SWQoXG4gICAgaWQgYXMgc3RyaW5nLFxuICAgIGdpZnRDYXJkSWQgYXMgc3RyaW5nXG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQXV0aG9yaXphdGlvbihjdHg6IENvbnRleHQpIHtcbiAgY29uc3Qge1xuICAgIGNsaWVudHM6IHsgZ2lmdENhcmRQcm92aWRlciB9LFxuICAgIHZ0ZXg6IHtcbiAgICAgIHJvdXRlOiB7XG4gICAgICAgIHBhcmFtczogeyBnaWZ0Q2FyZElkLCBpZCB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9ID0gY3R4XG5cbiAgY3R4LnN0YXR1cyA9IDIwMFxuICBjdHguYm9keSA9IGdpZnRDYXJkUHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25BdXRob3JpemF0aW9uKFxuICAgIGlkIGFzIHN0cmluZyxcbiAgICBnaWZ0Q2FyZElkIGFzIHN0cmluZ1xuICApXG59XG4iXX0=